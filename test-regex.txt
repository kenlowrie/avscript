This file contains the regular expressions and the tests used to validate them
on regex101.com

RE: Matches shots
r'^[-|\*|\+][ ]?(?![-]{2})'
r'^[-|\*|\+][ ]?(?![-]{2})(.*)'

<TEST>
--- NO
---NO
@@@ NO
[NO NO NO]:NO NO NO
- YES YES
* YES YES
+ YES YES
-YES YES
*YES YES
+YES YES
-*YES YES
--YES YES
-- YES YES
 - NO NO
 * NO NO
 + NO NO
 -NO NO
 *NO NO
 +NO NO
 </TEST>

----------------------------

RE: Matches DIV
'div' : 
    C_regex_main(r'[-@]{3}[ ]?([^\s]+)[ ]?([\w\.]+)?[ ]?',
                 r'[-@]{3}[ ]?([^\s]+)[ ]?([\w\.]+)?[ ]?(.*)')

<TEST>
--- DIVidSTR CLASSor. [optional title]
-NO
-NO NO
-NO NO NO
--NO
--NO NO
--NO NO NO
--- YES
--- YES 
--- YES .
--- YES . YES
--- YES YES
--- YES YES YES
--- YES YES YES YES
@@@ YES
@@@ YES 
@@@ YES YES
@@@ YES YES YES
@@@ YES YES YES YES
---YES
---YES 
---YES YES
---YES YES YES
---YES YES YES YES
@@@YES
@@@YES 
@@@YES YES
@@@YES YES YES
@@@YES YES YES YES
</TEST>

----------------------------
RE Matches Header level 1 to level 6

'h#'  : 
    C_regex_main(r'^([#]{1,6})[ ]?',
                 r'^([#]{1,6})[ ]?(.*)')

<TEST>
# Yes YES
## Yes
### Yes
#### Yes YES
##### Yes
###### Yes YES
#Yes
##Yes YES
###Yes YES
####Yes
#####Yes YES
######Yes
?#NO
*##NO
!###NO
</TEST>


----------------------------
RE Matches Variable and Link definitions

'define'    : 
    C_regex_main(True,  True,   False,  
                 r'^\[([^\]]+)\](?=(:(.+))|(%(.+)))',
                 None),

<TEST>
^\[([^\]]+)\](?=(:\((.+)\)))
^\[([^\]]+)\](?=(:\(?(.+)\)?))
^\[([^\]]+)\](?=(:\(?(.+[^\)])\)?))
^\[([^\]]+)\](?=(:[\(]?(.+))|(%(.+)))

 MATCH: -->^\[([^\]]+)\]:\(?(.+[^\s])[ ]+\"(.+)\"\)?
BETTER: -->^\[([^\]]+)\]:\(?(.+[^\s])[ ]+(\"(.+)\")\)?

Just inline version:
  BEST: -->(\[([^\]]+)\]:\(([^\s]*)[ ]*(\"(.+)\")?\))

[feedback]:mailto:email@yourdomain.com?subject=Your%20Film%20Title%20Feedback%20YES
[Link to Article]:https://wordpress.org/news/2018/05/the-month-in-wordpress-april-2018/%20YES/
[Link to Article2]:https://domain.com/another_article_link%20YES
[domain]%cls-YES
NO NO NO
[Link to Article] <-- This should be turned into a link
[Is this working right]:(www.cloudylogic.com) - BUG BUG BUG
[how about this]:(www.cloudylogic.com   "title")
xxx[this]:(www.cloudylogic.com   "t2")
xxx[this]:(www.cloudylogic.com)
[this]:(https://www.cloudylogic.com)
[Google without a title]:(https://google.com)
[title]:www.cloudylogic.com    "title"
{:.red.center}### avscript tester doc
$$cover$$:<<User Manual>>:<<Ken Lowrie>>:<<This is a user manual for the AVScript utility.>>
$$revision$$:<<*1b*>>
{:.blue}--- plain plainTitle Variables
We can define variables using the syntax: ***[name]%value***. 
[whoami]%Ken Lowrie
Now, whenever I write whoami inside square brackets **[ ]**, it will replace it with *Ken Lowrie*. Let's try that now. Hello, my name is *[whoami]*.
@@@plain plainTitle Links
We can also define hyperlinks using a similar syntax: [linkID]:linkurl. Let's go ahead and define a few links now...
[cls]:https://cloudylogic.com
NO NO NO
[me]:mailto:myemail@cloudylogic.com
NO NO NO

[My Email Address]%me
[My Production Website]%cls
[Cloudy Logic Studios, LLC]%cls
</TEST>

----------------------------

RE: Matches <http[s]?:...> anywhere in line.
<((?:http|ftp)s?://(?:(?:[A-Z0-9](?:[A-Z0-9-]{0,61}[A-Z0-9])?\.)+(?:[A-Z]{2,6}\.?|[A-Z0-9-]{2,}\.?)|localhost|\d{1,3}\.\d{1,3}\.\d{1,3}\.\d{1,3}|\[?[A-F0-9]*:[A-F0-9:]+\]?)(?::\d+)?(?:/?|[/?]\S+))>
<TEST>
{:.red.center}### avscript tester
We can define variables using the syntax: ***[name]%value***. Here's an example. The next line will define the variable *whoami* and set it to *[Ken Lowrie]*.
[whoami]%Ken Lowrie
Now, whenever I write whoami inside square brackets ***[]***, it will replace it with *Ken Lowrie*. Let's try that now. Hello, my name is *[whoami]*. That's pretty straightforward...
We can also define hyperlinks using a similar syntax: [linkID]:(linkurl). Let's go <ahead> and define a few links now...
[cls]:https://cloudylogic.com
[me]:mailto:myemail@cloudylogic.com
[me] but not [me]:(x) or [me]%ken. But [me] is okay [as-is] 
[another]%This is me
I've defined two new links, one called *cls* which is a standard these just like variables, just write the ID inside square brackets.<https://cloudylogic.com> 

For use when searching at beginning of line. Get's both : and %
^\[([^\]]+)\](?=(:(.+))|(%(.+)))

Maybe when doing markdown: 
\[([^\]]+)\](?!(:(.+))|(%(.+)))

For inline links:
<(.+)>

For inline html links:
\[([^\]]+)\](?=(:\((.+)\)))

(?i)\b((?:[a-z][\w-]+:(?:\/{1,3}|[a-z0-9%])|www\d{0,3}[.]|[a-z0-9.\-]+[.][a-z]{2,4}\/)(?:[^\s()<>]+|\(([^\s()<>]+|(\([^\s()<>]+\)))*\))+(?:\(([^\s()<>]+|(\([^\s()<>]+\)))*\)|[^\s`!()\[\]{};:'\".,<>?«»“”‘’]))
</TEST>

